//Reading Notes
The compilation is done by the JAVAC compiler which is a primary Java compiler included in the 
Java development kit (JDK). It takes the Java program as input and generates bytecode as output.

Bytecode in the Development process:  As discussed, the Javac compiler of JDK compiles the java 
source code into bytecode so that it can be executed by JVM. It is saved as .class file by the 
compiler. To view the bytecode, a disassembler like javap can be used.

ava Development Kit(JDK): While we were using the term JDK when we learn about bytecode and JVM.
So, as the name suggests, it is a complete Java development kit that includes everything
including compiler, Java Runtime Environment (JRE), java debuggers, java docs, etc.
For the program to execute in java, we need to install JDK on our computer in order to create,
compile and run the java program.

Java Runtime Environment (JRE): JDK includes JRE. JRE installation on our computers allows the 
java program to run, however, we cannot compile it. JRE includes a browser, JVM, applet supports,
and plugins. For running the java program, a computer needs JRE.

Garbage Collector: In Java, programmers can’t delete the objects. To delete or recollect that 
memory JVM has a program called Garbage Collector. Garbage Collectors can recollect the objects 
that are not referenced. So Java makes the life of a programmer easy by handling memory 
management. However, programmers should be careful about their code whether they are using objects
that have been used for a long time. Because Garbage cannot recover the memory of objects being 
referenced.

ClassPath: The classpath is the file path where the java runtime and Java compiler look for 
.class files to load. By default, JDK provides many libraries. If you want to include external 
libraries they should be added to the classpath.

Primary/Main Features of Java
1. Platform Independent:  Compiler converts source code to bytecode and then the JVM executes the
bytecode generated by the compiler. This bytecode can run on any platform be it Windows, Linux, 
or macOS which means if we compile a program on Windows, then we can run it on Linux and vice 
versa. Each operating system has a different JVM, but the output produced by all the OS is the 
same after the execution of bytecode. That is why we call java a platform-independent language.

2. Object-Oriented Programming Language:  Organizing the program in the terms of collection of 
objects is a way of object-oriented programming, each of which represents an instance of the 
class.
The four main concepts of Object-Oriented programming are:
Abstraction   
Encapsulation
Inheritance
Polymorphism

3. Simple:  Java is one of the simple languages as it does not have complex features like pointers
and operator overloading, multiple inheritances, and Explicit memory allocation. 

4. Robust:  Java language is robust which means reliable. It is developed in such a way that it 
puts a lot of effort into checking errors as early as possible, that is why the java compiler is 
able to detect even those errors that are not easy to detect by another programming language. 
The main features of java that make it robust are garbage collection, Exception Handling, and 
memory allocation.

5. Secure:  In java, we don’t have pointers, so we cannot access out-of-bound arrays i.e it 
shows ArrayIndexOutOfBound Exception if we try to do so. That’s why several security flaws like 
stack corruption or buffer overflow are impossible to exploit in Java. Also java programs run in 
an environment that is independent of the os(operating system) environment which makes java 
programs more secure .

6. Distributed:  We can create distributed applications using the java programming language.
 Remote Method Invocation and Enterprise Java Beans are used for creating distributed 
applications in java. The java programs can be easily distributed on one or more systems that 
are connected to each other through an internet connection.

7. Multithreading:  Java supports multithreading. It is a Java feature that allows concurrent 
execution of two or more parts of a program for maximum utilization of the CPU.

8. Portable:  As we know, java code written on one machine can be run on another machine. The 
platform-independent feature of java in which its platform-independent bytecode can be taken to 
any platform for execution makes java portable.

9. High Performance: Java architecture is defined in such a way that it reduces overhead during 
the runtime and at some time java uses Just In Time (JIT) compiler where the compiler compiles 
code on-demand basics where it only compiles those methods that are called making applications 
to execute faster.

10. Dynamic flexibility: Java being completely object-oriented gives us the flexibility to add 
classes,  new methods to existing classes and even create new classes through sub-classes. 
Java even supports functions written in other languages such as C, C++ which are referred to as 
native methods.

11. Sandbox Execution: Java programs run in a separate space that allows user to execute their 
applications without affecting the underlying system with help of a bytecode verifier. Bytecode 
verifier also provides additional security as its role is to check the code for any violation of 
access.

12. Write Once Run Anywhere: As discussed above java application generates a ‘.class’ file which 
corresponds to our applications(program) but contains code in binary format. It provides ease to 
architecture-neutral ease as bytecode is not dependent on any machine architecture. It is the 
primary reason java is used in the enterprising IT industry globally worldwide.

13. Power of compilation and interpretation: Most languages are designed with purpose either 
they are compiled language or they are interpreted language. But java integrates arising 
enormous power as Java compiler compiles the source code to bytecode and JVM  executes this 
bytecode to machine OS-dependent executable code.

Explanation:
1. Comments: Comments are used for explaining code and are used in a similar manner in Java or 
C or C++. Compilers ignore the comment entries and do not execute them. Comments can be of a 
single line or multiple lines.
Single line Comments:
Syntax:

// Single line comment
Multi-line comments:
Syntax:

/* Multi line comments*/
2. import java.io.*: This means all the classes of io package can be imported. Java io package 
provides a set of input and output streams for reading and writing data to files or other input 
or output sources.

3.  class: The class contains the data and methods to be used in the program. Methods define 
the behavior of the class. 

4.  static void Main(): static keyword tells us that this method is accessible without 
instantiating(returning) the class.

5.  void: keywords tell that this method will not return anything. The main() method is the 
entry point of our application.

6.  System.in: This is the standard input stream that is used to read characters from the 
keyboard or any other standard input device.

7.  System.out: This is the standard output stream that is used to produce the result of a 
program on an output device like the computer screen.

8.  println(): This method in Java is also used to display text on the console. It prints the 
text on the console and the cursor moves to the start of the next line at the console. 
The next printing takes place from the next line.

9.  String []args: This is the argument passed to the main function which is an array of strings 
with the array name args. One can choose their own flexible name but this name is used by many 
developers.

Everything in java , is represented in Class as an object including the main function.

Similarities and Difference between Java and C++

Similarities between Java and C++
1. Execution: At compile-time, Java source code or .java file is converted into bytecode or 
.class file. At runtime, JVM (Java Virtual Machine) will load the .class   file and will 
convert it to machine code with the help of an interpreter. After compilation of method 
\calls (using the Just-In-Time (JIT) compiler), JVM will execute the optimized code. 
So Java is both compiled as well as an interpreted language. On the other hand, C++ executes 
the code by using only a compiler. The C++ compiler compiles and converts the source code into
the machine code. That’s why C++ is faster than Java but not platform-independent.

{source file(.java)-->Compiler-->ByteCode(class)}(compile time)-->
-->{JIT compiler--> Native Compiler}(at Run Time)

Source code-->Pre-Processor directive-->Compiler->[Assemplying the code]->Assembler->[Object file]
->Linker-->Executable file

Features			C++	Java
Abstraction			Yes	Yes
Encapsulation			Yes	Yes
Single Inheritance		Yes	Yes
Multiple Inheritance		Yes	No
Polymorphism			Yes	Yes
Static Binding			Yes	Yes
Dynamic Binding			Yes	Yes
Operator Overloading		Yes	No
Header Files			Yes	No
Pointers			Yes	No
Global Variables		Yes	No
Template Class			Yes	No
Interference and Packages	No	Yes
API				No	Yes

Applications of C++ Programming language: 
Suitable for Developing large software (like passenger reservation systems).
MySQL is written in C++.
For fast execution, C++ is majorly used in Game Development.
Google Chromium browser, file system, and cluster data processing are all written in C++.
Adobe Premiere, Photoshop, and Illustrator; these popular applications are scripted in C++.
Advanced Computations and Graphics- real-time physical simulations, high-performance image 
processing.
C++ is also used in many advanced types of medical equipment like MRI machines, etc.

Applications of Java Programming language: 
Desktop GUI Applications development.
Android and Mobile application development.
Applications of Java are in embedded technologies like SIM cards, disk players, TV, etc.
Java EE (Enterprise Edition) provides an API and runtime environment for running large enterprise software.
Network Applications and Web services like Internet connection, Web App Development.



 









